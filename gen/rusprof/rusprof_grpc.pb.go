// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/rusprof.proto

package rusprof

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Rusprof_GetCompany_FullMethodName = "/Rusprof/GetCompany"
)

// RusprofClient is the client API for Rusprof service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RusprofClient interface {
	GetCompany(ctx context.Context, in *CreateReqest, opts ...grpc.CallOption) (*CreateResponse, error)
}

type rusprofClient struct {
	cc grpc.ClientConnInterface
}

func NewRusprofClient(cc grpc.ClientConnInterface) RusprofClient {
	return &rusprofClient{cc}
}

func (c *rusprofClient) GetCompany(ctx context.Context, in *CreateReqest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, Rusprof_GetCompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RusprofServer is the server API for Rusprof service.
// All implementations should embed UnimplementedRusprofServer
// for forward compatibility
type RusprofServer interface {
	GetCompany(context.Context, *CreateReqest) (*CreateResponse, error)
}

// UnimplementedRusprofServer should be embedded to have forward compatible implementations.
type UnimplementedRusprofServer struct {
}

func (UnimplementedRusprofServer) GetCompany(context.Context, *CreateReqest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompany not implemented")
}

// UnsafeRusprofServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RusprofServer will
// result in compilation errors.
type UnsafeRusprofServer interface {
	mustEmbedUnimplementedRusprofServer()
}

func RegisterRusprofServer(s grpc.ServiceRegistrar, srv RusprofServer) {
	s.RegisterService(&Rusprof_ServiceDesc, srv)
}

func _Rusprof_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RusprofServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rusprof_GetCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RusprofServer).GetCompany(ctx, req.(*CreateReqest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rusprof_ServiceDesc is the grpc.ServiceDesc for Rusprof service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rusprof_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Rusprof",
	HandlerType: (*RusprofServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompany",
			Handler:    _Rusprof_GetCompany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rusprof.proto",
}
